import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;

public class Klayton_DalPra_Module4Assessment_IT481 {
	


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] small = {982950,782629,167317,792693,455660,913603,43985,721202,518898,784631};
		int[] medium = {297379,6561,986273,658724,390178,901225,102755,267029,819922,850113,
				241299,323716,208517,285000,605378,525342,396782,225641,665231,276550,929008,339483,473925,701238,995650,
				879384,892242,644180,942795,113160,499507,714893,364319,617521,140341,74949,481117,599053,511424,850606,981493,
				226139,927706,764527,747795,808288,424092,823542,926611,543119,646503,673807,613295,466274,565287,540383,16333,
				185844,904337,505167,343047,960414,320847,245294,805336,688634,793503,253493,82646,418249,381008,992612,299094,
				53823,498187,398379,72617,44931,123514,637662,476288,970365,899776,53912,815381,98955,918662,787103,968501,
				203901,90434,642438,667096,135027,391444,400219,494856,912176,955091,908721,577012,393003,925934,982552,899259,
				889706,232017,340908,947007,461777,947077,563293,887893,995631,712127,314690,833958,597053,765051,897823,814628,
				268621,487168,527083,967603,321882,17328,586830,112000,482776,406965,536225,306550,188889,993626,53386,215411,
				148399,155854,473592,105086,833080,378882,569410,78216,211576,608486,245052,713450,694151,199407,772909,625345,
				956433,375132,787151,584220,37195,7397,367414,743114,864018,696670,195045,207470,150716,588925,945007,652899,
				431679,99396,788480,947359,850856,730607,124355,766300,206862,469808,432224,2802,670744,830059,445148,369480,
				539237,459546,677371,964879,363866,385338,710358,734319,805046,380611,539898,693648,600374,648497,717714,504041,
				107591,1049,982914,487008,985229,978424,571805,450974,707759,901234,418972,764267,777084,678115,18220,954099,
				688501,300919,798880,737080,936832,351538,491126,794041,607159,517206,103404,790414,384694,65250,815690,113159,
				139554,463592,304259,546177,594785,849915,756756,638397,969749,850255,110825,832197,906039,326886,855183,514541,
				429369,995715,68954,29185,178417,494999,243240,345553,640416,410056,828311,518339,673291,962747,380482,291620,
				165459,559839,644631,202262,286925,160981,901497,319593,419120,474874,433309,321834,515939,321294,16939,954462,
				344754,107014,940727,41700,783686,255252,159248,129518,110240,601112,849725,527028,6424,219624,814471,982876,
				826771,888302,885616,484203,528215,402759,731584,697996,544576,261774,239166,388093,803431,817286,950719,
				735868,29448,845178,872924,868568,455793,634270,341708,56522,74014,113829,527334,978909,592840,243996,594355,
				177501,347632,878858,493008,318770,504738,578538,851820,166980,38834,394480,465586,234357,126328,481254,428555,
				919161,794219,498515,49585,568459,891337,158382,304164,309616,707688,946341,727636,683015,857631,997879,334620,
				78231,363959,348413,361524,726854,232443,290667,372231,537408,190226,371522,541431,371262,676462,639441,735759,
				453172,619910,113942,349790,486055,15709,90191,722117,696855,822378,814618,356164,478784,240083,271601,101023,
				515004,2550,306562,909540,269753,917501,77478,784040,515163,524300,874603,44461,125491,402536,677361,109398,
				715203,361548,427651,567388,823345,468447,890481,434007,253839,630966,145634,139713,869839,241527,208215,
				974060,609997,210185,11259,423812,745465,566655,190,85646,428693,695424,886758,608564,398557,182972,689210,
				426771,301068,202439,45771,880724,460908,338584,930139,692187,96246,764704,320527,658567,907781,723193,77913,
				862451,692667,332723,274475,654202,134974,847569,479831,158603,206545,628385,60521,80978,675595,248770,377282,
				143886,65126,358274,875034,572364,29205,150005,452062,663902,522379,539816,167769,628726,325978,454059,302444,
				566611,464788,944208,17866,658410,798541,199184,384149,393588,604909,909994,336088,929521,284154,856352,201381,
				483936,410328,31225,803436,998819,229870,96792,783075,182262,365698,474097,706322,434132,923353,908705,729522,
				92131,415494,925970,78438,896695,921993,192064,364526,566389,685152,430681,809483,899815,902979,210416,778238,
				875774,828247,614054,630905,810278,406994,528583,795845,747220,597363,53517,138810,908896,198175,315162,157246,
				213248,486312,795726,264206,576605,213010,138753,442890,963871,541362,276104,850720,922516,320807,636790,530921,
				642395,689127,144208,249962,420330,368418,685915,620794,776551,178774,748821,94679,369524,231845,952767,108510,
				286330,986207,286681,659862,247701,847416,954124,848635,759959,277883,868747,471967,270536,445154,5281,588253,
				939407,281912,7925,76388,725691,457022,685582,608012,106826,164105,282132,123361,897142,822688,700009,855417,
				313345,756618,176628,182441,646287,665468,265730,105528,641615,236858,359522,945712,966274,561099,402526,
				934224,943508,104295,894333,729884,75932,872011,755987,539175,744387,52849,143549,437439,869727,869740,
				832387,693697,255342,586497,367055,386979,790132,618143,774157,368630,684809,475763,269368,672924,438839,
				840082,54847,807405,290967,402748,999551,964738,493204,240209,722487,89454,866328,392354,357754,905812,
				744329,6538,70257,467117,595926,877348,212242,522181,323200,463432,863375,11203,480500,494950,380857,301221,
				431281,98686,501098,350363,766095,962568,480795,850490,141966,437343,742750,539433,71470,630360,500610,296856,
				89299,484909,876686,341897,154736,558269,98362,836085,110375,712621,461090,461629,510613,215186,879795,93031,
				157810,807429,15521,509074,239725,147912,160473,202592,48709,659334,292108,737021,881333,217545,965764,771592,
				866519,308759,5302,831124,150918,250986,272585,131727,82191,826589,149093,290323,774012,205191,746819,543756,
				711032,349553,280594,182338,857688,191836,480292,263077,71686,743589,398903,309367,491120,960054,481245,626846,
				963623,617864,298147,69164,516607,684897,922181,572800,329551,662091,523616,546647,662480,159175,399003,249938,
				719168,529811,309883,621194,479290,736338,705358,631218,120638,740283,129841,124773,770688,622049,876073,
				288416,976226,321653,733527,336079,460398,362108,503617,739325,448462,168049,805679,345823,86693,624381,
				581460,27424,253283,333260,620899,78330,365787,622393,378276,444196,626518,733656,325346,4609,515528,778240,
				96853,554236,240151,983004,723865,832040,280826,472473,321661,933309,134757,331840,701446,705846,852199,
				978622,508940,279524,984517,934046,657940,707502,118861,929994,23252,807764,261219,913298,584909,685228,
				947737,916425,474380,87538,113656,952032,663550,701741,429842,58634,358484,734414,28821,375588,512574,
				634405,285394,657820,257433,615183,591302,954196,464950,712945,869100,268189,100199,476907,907301,895437,
				502439,29877,467002,790035,240240,160017,509660,749871,726794,308811,826289,431056,352762,805618,810319,
				202450,496562,465786,109494,633545,405771,717140,416597,972404,608369,748788,714473,315124,208830,786510,
				877717,294232,151617,490615,651569,20666,293414,644998,677968,702474,915478,760233,419379,833073,128775,
				948880,542925,92907,477109,447796,570521,140555,927232,460092,375113,282824,349983,568469,408803,608078,
				542768,832023,385540,543056,821245,820223,509223,950621,216873,260594,237500,824392,357004,680753,2170,
				355921,175512,410802,269044,651050,704460,578671,813269,654335,331135,278862,110535,903855,69775,924146,
				300251,583504,593641,900119,263690,965793,600,34122,978266,745451,544188,62875,458516,952572,852152,237296,
				275040};
		
		
		System.out.println("		Small Data Set \n");
		
		bubbleSort(small);
		optimizedBubbleSort(small);
		System.out.println("----------------------------------------");
		
		System.out.println("		Medium Data Set \n");
		
		bubbleSort(medium);
		optimizedBubbleSort(medium);
		System.out.println("----------------------------------------");
		System.out.println("		Large Data Set \n");
		
		
		// The large data set was too large to store as a variable. 
		try {
            File file = new File("large.txt");
            Scanner scanner = new Scanner(file);
            String line = scanner.nextLine();
            String[] values = line.split(",");
            int[] numbers = new int[values.length];
            for (int i = 0; i < values.length; i++) {
                numbers[i] = Integer.parseInt(values[i]);
            }
            scanner.close();
            
            bubbleSort(numbers);
            optimizedBubbleSort(numbers);
            
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
		
		/*
		 * How i made my data sets:
		String temp = "";
		int[] tempArr = new int[10];
		for(int i = 0; i < 10000; i++) {
			int rand = (int)(Math.random() * 1000000);
			temp += Integer.toString(rand) + ",";
		}
		System.out.println(temp);
		*/

	}
	
	static void bubbleSort(int[] arr) {
	    int n = arr.length;
	    int tempArr[] = arr;
	    long startTime = System.currentTimeMillis();
	    int temp = 0;
	    for(int i=0; i < n; i++){
	        for(int j=1; j < (n-i); j++){
	            if(tempArr[j-1] > tempArr[j]){
	                temp = tempArr[j-1];
	                tempArr[j-1] = tempArr[j];
	                tempArr[j] = temp;
	            }
	        }
	    }
	    long endTime = System.currentTimeMillis();
	    System.out.println("Bubble Sort Took: " + (endTime-startTime) + " milliseconds.");
	}
	
	
	public static void optimizedBubbleSort(int[] arr) {
	    boolean sorted = false;
	    int[] tempArr = arr;
	    int n = tempArr.length;
	    long startTime = System.currentTimeMillis();
	    while (!sorted) {
	        sorted = true;
	        int lastSwappedIndex = n - 1;
	        for (int i = 0; i < lastSwappedIndex; i++) {
	            if (tempArr[i] > tempArr[i + 1]) {
	                int temp = tempArr[i];
	                tempArr[i] = tempArr[i + 1];
	                tempArr[i + 1] = temp;
	                sorted = false;
	                lastSwappedIndex = i;
	            }
	        }
	        n = lastSwappedIndex + 1;
	    }
	    long endTime = System.currentTimeMillis();
	    System.out.println("Optimized Bubble Sort Took: " + (endTime-startTime) + " milliseconds.");
	}
	

}
